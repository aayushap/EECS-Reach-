#include <gamma.h>
#include <RGBmatrixPanel.h>
#include <Adafruit_GFX.h>

// define the wiring of the LED screen
const uint8_t CLK = 8;
const uint8_t LAT = A3;
const uint8_t OE = 9;
const uint8_t A = A0;
const uint8_t B = A1;
const uint8_t C = A2;

// define the wiring of the inputs
const int POTENTIOMETER_PIN_NUMBER = 5;
const int BUTTON_PIN_NUMBER = 10;

// a global variable that represents the LED screen
RGBmatrixPanel matrix(A, B, C, CLK, LAT, OE, false);

// constant number of pipes in the game
const int TOTAL_PIPES = 30; 

// the following functions are for printing messages
void print_score(int score);
void game_over();

class Color {
public:
  int red;
  int green;
  int blue;
  Color() {
    red = 0;
    green = 0;
    blue = 0;
  }
  Color(int r, int g, int b) {
    red = r;
    green = g;
    blue = b;
  }
  uint16_t to_333() const {
    return matrix.Color333(red, green, blue);
  }
};

const Color BLACK(0, 0, 0);
const Color RED(7, 0, 0);
const Color ORANGE(7, 4, 0);
const Color YELLOW(7, 7, 0);
const Color GREEN(0, 7, 0);
const Color BLUE(0, 0, 7);
const Color PURPLE(7, 0, 7);
const Color WHITE(7, 7, 7);
const Color LIME(4, 7, 0);
const Color AQUA(0, 7, 7);

const float rise_rate = 2.0;
const float fall_rate = 1.0;

class Bird {
  public:
  //Default and Non-Default Constructor
  Bird(){
     x = 0; 
     y = 0; 
     life = 1; 
     jumped = false;
  }

  Bird(int x_arg, int y_arg){
    initialize(x_arg, y_arg); 
  }
  
  void initialize (int x_arg, int y_arg){
    x = x_arg; 
    y = y_arg; 
    life = 1; 
    jumped = false;
  }
  
  //Getters & Setters for Bird
  int get_x() const {
    return x;
  }
  int get_y() const {
    return y; 
  }
  int get_life() const {
    return life; 
  }

  bool has_jumped() const {
    return jumped;
  }

   void set_jumped(bool is_Jump) {
    jumped = is_Jump;
   }
   
  int set_y(int y_arg) {
    y = y_arg;
  }
  
  //Moves the bird up and down
  //Modifies: y, jumped
  
  void move() {
      if (jumped) {
        // Will rise by rise_rate
        y = y - rise_rate;
      }
      else {
        // when button released, will fall by fall rate.
        y = y + fall_rate; 
      }
  }
  
  //Draws the Flappy Bird if life greater than 0
  //Calls: draw_with_rgb
  void draw() {
    if (life < 1) {
     erase(); 
    }
    else {
     draw_with_rgb(YELLOW, BLUE); 
    }
  }
  
  //Bird flies into the Pipe or hits the ground! 
  //Calls: erase
  void hit() {
    erase(); 
   }

  //Draws the background color, Black, where the Flappy Bird used to be.
  //Calls: draw_with_rgb
  void erase() {
    draw_with_rgb(BLACK, BLACK); 
  }
  
  private:
  int x; 
  int y; 
  int life; 
  bool jumped;

  //Draws Flappy Bird
  void draw_with_rgb(Color body_color, Color mouth_color){
    matrix.drawPixel(x + 4, y + 8, body_color.to_333()); 
    matrix.drawPixel(x + 4, y + 7, body_color.to_333()); 
    matrix.drawPixel(x + 4, y + 6, body_color.to_333()); 
    matrix.drawPixel(x + 6, y + 7, body_color.to_333()); 
    matrix.drawPixel(x + 6, y + 6, body_color.to_333()); 
    matrix.drawPixel(x + 6, y + 8, body_color.to_333());
    matrix.drawPixel(x + 5, y + 6, mouth_color.to_333());
    matrix.drawPixel(x + 5, y + 7, mouth_color.to_333());
  }
};

class Pipes {
  public: 
  //Default and Non-default Constructors
  Pipes() {
    width = 0;
    height = 0;
    x_pos = 12; 
  }
  
  //Initializes the width and height of Pipes
  Pipes(int width, int height, int x_pos) {
    initialize(width, height, x_pos);
  }
  
  void initialize(int width1, int height1, int x_posit) {
    width = width1;
    height = height1;
    x_pos = x_posit; 
  }
  
  //Getters and Setters for x and y
  int get_width() const {
    return width;
  }
  
  int get_height() const {
    return height;
  }
  
  //Y remains the same, while the X moves to the left
  void move() {
    x_pos -= 1;
  }
  
  //Draws the Pipe
  void draw() {
    draw_with_rgb(GREEN);
  }

void erase() {
    draw_with_rgb(BLACK);
  }
  
  private: 
   int width; //width
   int height; //Height
   int x_pos; //32 Horizontal X Position

/* 
 *    //Draws the Pipe (with RGB Green) randomized Y values
  void draw_with_rgb(Color pipe_color){
   for (int x = 7; x < 100;  x += 7) {
    randomSeed(analogRead(0));
     int random1 = random(1,7);
     int random2 = random(1,7);
    matrix.drawRect(x, 0, 4, random1, GREEN.to_333());
    matrix.fillRect(x, 0, 4, random1, GREEN.to_333());
    
    matrix.drawRect(x, 10, 4, random2, GREEN.to_333());
    matrix.fillRect(x, 10, 4, random2, GREEN.to_333());
   }
  }
};
*
*/

//Draws the Pipe (with RGB Green) randomized Y values
void draw_with_rgb(Color pipe_color){
    int botHeight = 16 - height - 4;
    int botTopPos = height + 4;  
    
    matrix.drawRect(x_pos, 0, width, height, RED.to_333());
    matrix.fillRect(x_pos, 0, width, height, RED.to_333());
    
    matrix.drawRect(x_pos, botTopPos + 3, width, botHeight, pipe_color.to_333());
    matrix.fillRect(x_pos, botTopPos + 3, width, botHeight, pipe_color.to_333());
  }
};

class Game {
  public:
  //Constructor for Game class
  Game(){ 
    time = 0; 
    score = 0; 
  }
  
  //Sets up a new Game of FlappyBird
  //Modifies: Global variable Matrix
  void setup(){
    time = 0;
    randomSeed(analogRead(0));
    matrix.begin();
    bird.draw();
    reset_game(); 
 
  }
  
  // advances the game simulation one step and renders the graphics
  // see spec for details of game
  // Modifies: global variable matrix
  void update(int potentiometer_value, bool button_pressed){ 
    Serial.print(button_pressed);
    if (button_pressed) {
      last_jump = millis();
      bird.set_jumped(true);
      
    }

    else {
      bird.set_jumped(false);
    }
    
     if (millis() - time > 300){
       bird.erase();
       bird.move();
       bird.draw();
       time = millis();
      }
    }

    //if statements if the bird hits the pipe or the ground

  private:
   int score; 
   int time; 
   Bird bird; 
   unsigned long last_jump;  
   Pipes pipey[TOTAL_PIPES];
  
  //Resets the Game
  void reset_game(){
   for (int x_pos = 11; x_pos < 210; x_pos = x_pos + 8){
     for (int count = 0; count < TOTAL_PIPES; count++){ 
       int randomNum = random(2, 10);  
       Serial.println(randomNum); 
       pipey[count].initialize(4, randomNum, x_pos); 
       pipey[count].draw(); 
      }
    }
  }
};

Game game; 

void setup() {
 Serial.begin(9600);
  pinMode(BUTTON_PIN_NUMBER, INPUT);
  matrix.begin();
  game.setup();
}

void loop() {
  int potentiometer_value = analogRead(POTENTIOMETER_PIN_NUMBER);
  bool button_pressed =(digitalRead(BUTTON_PIN_NUMBER) == HIGH);
  game.update(potentiometer_value, button_pressed);
}

void print_score(int score) {
  matrix.setCursor(9,0); //Fix ME to place the score in the right place
  matrix.setTextSize(0.5); //Possibly fix as well
  
  matrix.setTextColor(matrix.Color333(7,0,0));
  matrix.print('S');
  matrix.setTextColor(matrix.Color333(7,0,0));
  matrix.print('C');
  matrix.setTextColor(matrix.Color333(7,0,0));
  matrix.print('O');
  matrix.setTextColor(matrix.Color333(7,0,0));
  matrix.print('R');
  matrix.setTextColor(matrix.Color333(7,0,0));
  matrix.print('E');
  matrix.setTextColor(matrix.Color333(7,0,0));
  matrix.print(':');
  
  matrix.setCursor(13, 9);   // CHANGE CURSOR TO BE SMALLER and under the "Score"
  matrix.setTextColor(matrix.Color333(0,7,0)); 
  matrix.print(score);
}

//Displays "Game Over"
void game_over() {
matrix.setCursor(3,0);
matrix.setTextSize(1);

//game over displays in red
matrix.setTextColor(matrix.Color333(7,0,0));
matrix.print('G');
matrix.setTextColor(matrix.Color333(7,0,0));
matrix.print('A');
matrix.setTextColor(matrix.Color333(7,0,0));
matrix.print('M');
matrix.setTextColor(matrix.Color333(7,0,0));
matrix.print('E');

matrix.setCursor(2,9);
matrix.setTextColor(matrix.Color333(7,0,0));
matrix.print('O');
matrix.setTextColor(matrix.Color333(7,0,0));
matrix.print('V');
matrix.setTextColor(matrix.Color333(7,0,0));
matrix.print('E');
matrix.setTextColor(matrix.Color333(7,0,0));
matrix.print('R');
matrix.setTextColor(matrix.Color333(7,0,0));
matrix.print('!');
}
