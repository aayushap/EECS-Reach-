#include <gamma.h>
#include <RGBmatrixPanel.h>
#include <Adafruit_GFX.h>

// define the wiring of the LED screen
const uint8_t CLK = 8;
const uint8_t LAT = A3;
const uint8_t OE = 9;
const uint8_t A = A0;
const uint8_t B = A1;
const uint8_t C = A2;

// define the wiring of the inputs
const int POTENTIOMETER_PIN_NUMBER = 5;
const int BUTTON_PIN_NUMBER = 10;



// a global variable that represents the LED screen
RGBmatrixPanel matrix(A, B, C, CLK, LAT, OE, false);

// the following functions are for printing messages
void print_score(int score);
void game_over();

class Color {
public:
  int red;
  int green;
  int blue;
  Color() {
    red = 0;
    green = 0;
    blue = 0;
  }
  Color(int r, int g, int b) {
    red = r;
    green = g;
    blue = b;
  }
  uint16_t to_333() const {
    return matrix.Color333(red, green, blue);
  }
};

const Color BLACK(0, 0, 0);
const Color RED(7, 0, 0);
const Color ORANGE(7, 4, 0);
const Color YELLOW(7, 7, 0);
const Color GREEN(0, 7, 0);
const Color BLUE(0, 0, 7);
const Color PURPLE(7, 0, 7);
const Color WHITE(7, 7, 7);
const Color LIME(4, 7, 0);
const Color AQUA(0, 7, 7);

class Bird {
  public:
// default and non-default constructors
// getters and setters for x and y
// initialize function
// void move
// void draw
// void hit
// void erase 
  private:
// private variables x, y
// void draw_with_rgb
};

class Bird {
  public:
  
  //Constructors
  Bird(){
    x = 0; 
    y = 0; 
    life = 1; 
  }
  
  //Non-Default Constructor, Sets private data members
  Bird(int x_arg, int y_arg){
    initialize(x_arg, y_arg); 
  }
  void initialize (int x_arg, int y_arg){
    x = x_arg; 
    y = y_arg; 
    life = 1; 
  }
  
  //Getters & Setters for Bird
  int get_x() const {
    return x;
  }
  int get_y() const {
    return y; 
  }
  int get_life() const {
    return life; 
  }
  
  //Moves the bird to the right
  //Modifies: x, y
  void move() {
    //He must fall (change height/y) as he travels along (distance/x). What rate? 
  }
  
  //Draws the Flappy Bird if life > 0
  //Calls: draw_with_rgb
  void draw() {
    if (life < 1) {
     erase(); 
    }
    else {
     draw_with_rgb(YELLOW, WHITE, ORANGE); 
    }
  }
  
  //Bird flies into the Pipe or hits the ground! 
  //Calls: erase
  void hit() {
    lives--;
    erase(); 
   }

  //Draws the background color, Aqua, where the Flappy Bird used to be.
  //Calls: draw_with_rgb
  void erase() {
    draw_with_rgb(AQUA, AQUA, AQUA); 
  }
  
  private:
  int x; 
  int y; 
  int life; 
  
  //Draws Flappy Bird
  void draw_with_rgb(Color body_color, Color eye_color, Color mouth_color){
    matrix.drawPixel(x, y, body_color.to_333(); 
    matrix.drawPixel(x, y + 1, body_color.to_333(); 
    matrix.drawPixel(x + 1, y, eye_color.to_333(); 
    matrix.drawPixel(x + 1, y + 1, mouth_color.to_333(); 
  }
};

class Pipes {
  public: 
  //Default and Non-default Constructors
  Pipes() {
    x = 0;
    y = 0;
  }
  
  Pipes(int width, int height) {
    x = width;
    y = height;
  }
  
  // initialize
  Pipes(int width, int height) {
    initialize(width, height);
  }
  
  void initialize(int width, int height) {
    x = width;
    y = height;
  }
  
  //Getters and Setters for x and y
  int get_x() const {
    return x;
  }
  
  int get_y() const {
    return y;
  }
  
  // void move in x direction
  void move() {
  }
  
  // void draw
  void draw() {
  }

  private: 
  int x; //width
  int y; //Height
  // draw with RGB (green) with randomized y values
};

class Game {
  public:
  // Game constructor
  // void setup
  // void update

  private:
  // score, unsigned long time,
  // instances for each class
  // possible an array for pipes
}


void setup() {
 Serial.begin(9600);
  pinMode(BUTTON_PIN_NUMBER, INPUT);
  matrix.begin();
  game.setup();
}

void loop() {
   int potentiometer_value = analogRead(POTENTIOMETER_PIN_NUMBER);
  bool button_pressed = (digitalRead(BUTTON_PIN_NUMBER) == HIGH);
  game.update(potentiometer_value, button_pressed);
}

void print_score(int score);
  matix.setCursor(9,0); //Fix ME to place the score in the right place
  matrix.setTextSize(0.5); //Possibly fix as well
  
  matrix.setTextColor(matrix.Color333(7,0,0);
  matrix.print('S');
  matrix.setTextColor(matrix.Color333(7,0,0);
  matrix.print('C');
  matrix.setTextColor(matrix.Color333(7,0,0);
  matrix.print('O');
  matrix.setTextColor(matrix.Color333(7,0,0);
  matrix.print('R');
  matrix.setTextColor(matrix.Color333(7,0,0);
  matrix.print('E');
  matrix.setTextColor(matrix.Color333(7,0,0);
  matrix.print(':');
  
  matrix.setCursor(13, 9);   // CHANGE CURSOR TO BE SMALLER and under the "Score"
  matrix.setTextColor(matrix.Color333(0,7,0)); 
  matrix.print(score);
}

//Displays "Game Over"
void game_over() {
matrix.setCursor(3,0);
matrix.setTextSize(1);

//game over displays in red
matrix.setTextColor(matrix.Color333(7,0,0);
matrix.print('G');
matrix.setTextColor(matrix.Color333(7,0,0);
matrix.print('A');
matrix.setTextColor(matrix.Color333(7,0,0);
matrix.print('M');
matrix.setTextColor(matrix.Color333(7,0,0);
matrix.print('E');

matrix.setCursor(2,9);
matrix.setTextColor(matrix.Color333(7,0,0);
matrix.print('O');
matrix.setTextColor(matrix.Color333(7,0,0);
matrix.print('V');
matrix.setTextColor(matrix.Color333(7,0,0);
matrix.print('E');
matrix.setTextColor(matrix.Color333(7,0,0);
matrix.print('R');
matrix.setTextColor(matrix.Color333(7,0,0);
matrix.print('!');
}
